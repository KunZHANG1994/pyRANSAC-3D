{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is pyRANSAC-3D? \u00b6 pyRANSAC-3D is an open source implementation of Random sample consensus (RANSAC) method. It fits primitive shapes such as planes, cuboids and cylinder in a point cloud to many aplications: 3D slam, 3D reconstruction, object tracking and many others. Features: \u00b6 Plane Cylinder Cuboid Sphere Line Circle Point Installation \u00b6 Requirements: Numpy Install with Pypi : pip3 install pyransac3d Take a look: \u00b6 Example 1 - Planar RANSAC \u00b6 import pyransac3d as pyrsc points = load_points ( . ) # Load your point cloud as a numpy array (N, 3) plane1 = pyrsc . Plane () best_eq , best_inliers = plane1 . fit ( points , 0.01 ) Results in the plane equation Ax+By+Cz+D: [0.720, -0.253, 0.646, 1.100] Example 2 - Spherical RANSAC \u00b6 Loading a noisy sphere's point cloud with r = 5 centered in 0 we can use the following code: import pyransac3d as pyrsc points = load_points ( . ) # Load your point cloud as a numpy array (N, 3) sph = pyrsc . Sphere () center , radius , inliers = sph . fit ( points , thresh = 0.4 ) Results: center : [ 0.010462385575072288 , - 0.2855090643954039 , 0.02867848979091283 ] radius : 5.085218633039647 Documentation & other links \u00b6 The documentation is this \u1e54age . Source code in the Github repository . Pypi pakage installer You can find the animations you see in the documentation on branch Animations . It needs Open3D library to run. The Animation branch is not regularly maintained, it only exists to create some cool visualizations ;D License \u00b6 Apache 2.0 Contributing is awesome! \u00b6 See CONTRIBUTING Contact \u00b6 Developed with :heart: by the internet Mainteiner: Leonardo Mariga Did you like it? Remember to click on :star2: button.","title":"Home"},{"location":"#what-is-pyransac-3d","text":"pyRANSAC-3D is an open source implementation of Random sample consensus (RANSAC) method. It fits primitive shapes such as planes, cuboids and cylinder in a point cloud to many aplications: 3D slam, 3D reconstruction, object tracking and many others.","title":"What is pyRANSAC-3D?"},{"location":"#features","text":"Plane Cylinder Cuboid Sphere Line Circle Point","title":"Features:"},{"location":"#installation","text":"Requirements: Numpy Install with Pypi : pip3 install pyransac3d","title":"Installation"},{"location":"#take-a-look","text":"","title":"Take a look:"},{"location":"#example-1-planar-ransac","text":"import pyransac3d as pyrsc points = load_points ( . ) # Load your point cloud as a numpy array (N, 3) plane1 = pyrsc . Plane () best_eq , best_inliers = plane1 . fit ( points , 0.01 ) Results in the plane equation Ax+By+Cz+D: [0.720, -0.253, 0.646, 1.100]","title":"Example 1 - Planar RANSAC"},{"location":"#example-2-spherical-ransac","text":"Loading a noisy sphere's point cloud with r = 5 centered in 0 we can use the following code: import pyransac3d as pyrsc points = load_points ( . ) # Load your point cloud as a numpy array (N, 3) sph = pyrsc . Sphere () center , radius , inliers = sph . fit ( points , thresh = 0.4 ) Results: center : [ 0.010462385575072288 , - 0.2855090643954039 , 0.02867848979091283 ] radius : 5.085218633039647","title":"Example 2 - Spherical RANSAC"},{"location":"#documentation-other-links","text":"The documentation is this \u1e54age . Source code in the Github repository . Pypi pakage installer You can find the animations you see in the documentation on branch Animations . It needs Open3D library to run. The Animation branch is not regularly maintained, it only exists to create some cool visualizations ;D","title":"Documentation &amp; other links"},{"location":"#license","text":"Apache 2.0","title":"License"},{"location":"#contributing-is-awesome","text":"See CONTRIBUTING","title":"Contributing is awesome!"},{"location":"#contact","text":"Developed with :heart: by the internet Mainteiner: Leonardo Mariga Did you like it? Remember to click on :star2: button.","title":"Contact"},{"location":"contributing/","text":"Contributing to pyRANSAC_3D \u00b6 We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer We Develop with Github \u00b6 We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests \u00b6 Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create a new branch from master . If you've added code that should be tested, add tests. Update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Clean unused files before commiting using invoke clean Any contributions you make will be under the Apache 2.0 Software License \u00b6 In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern. Report bugs using Github's issues \u00b6 We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Write bug reports with detail, background, and sample code \u00b6 Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can. Include a sample code that anyone can run to reproduce what I was seeing What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. I'm not even kidding. Use a Consistent Coding Style \u00b6 4 spaces for indentation rather than tabs We have many interesting commands to help create a better code, try invoke --list Use invoke lint and invoke format before commit License \u00b6 By contributing, you agree that your contributions will be licensed under its Apache License 2.0.","title":"Contributing"},{"location":"contributing/#contributing-to-pyransac_3d","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"Contributing to pyRANSAC_3D"},{"location":"contributing/#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests.","title":"We Develop with Github"},{"location":"contributing/#we-use-github-flow-so-all-code-changes-happen-through-pull-requests","text":"Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create a new branch from master . If you've added code that should be tested, add tests. Update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Clean unused files before commiting using invoke clean","title":"We Use Github Flow, So All Code Changes Happen Through Pull Requests"},{"location":"contributing/#any-contributions-you-make-will-be-under-the-apache-20-software-license","text":"In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Any contributions you make will be under the Apache 2.0 Software License"},{"location":"contributing/#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy!","title":"Report bugs using Github's issues"},{"location":"contributing/#write-bug-reports-with-detail-background-and-sample-code","text":"Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can. Include a sample code that anyone can run to reproduce what I was seeing What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. I'm not even kidding.","title":"Write bug reports with detail, background, and sample code"},{"location":"contributing/#use-a-consistent-coding-style","text":"4 spaces for indentation rather than tabs We have many interesting commands to help create a better code, try invoke --list Use invoke lint and invoke format before commit","title":"Use a Consistent Coding Style"},{"location":"contributing/#license","text":"By contributing, you agree that your contributions will be licensed under its Apache License 2.0.","title":"License"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2020 Leonardo Mariga Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"api-documentation/auxiliary/","text":"get_rotationMatrix_from_vectors \u00b6 get_rotationMatrix_from_vectors ( u , v ) Create a rotation matrix that rotates the space from a 3D vector u to a 3D vector v Arguments : u : Orign vector np.array (1,3) . v : Destiny vector np.array (1,3) . Returns : Rotation matrix np.array (3, 3) rodrigues_rot \u00b6 rodrigues_rot ( P , n0 , n1 ) Rotate a set of point between two normal vectors using Rodrigues' formula. Arguments : P : Set of points np.array (N,3) . n0 : Orign vector np.array (1,3) . n1 : Destiny vector np.array (1,3) . Returns : Set of points P, but rotated np.array (N, 3)","title":"Auxiliary"},{"location":"api-documentation/auxiliary/#get_rotationmatrix_from_vectors","text":"get_rotationMatrix_from_vectors ( u , v ) Create a rotation matrix that rotates the space from a 3D vector u to a 3D vector v Arguments : u : Orign vector np.array (1,3) . v : Destiny vector np.array (1,3) . Returns : Rotation matrix np.array (3, 3)","title":"get_rotationMatrix_from_vectors"},{"location":"api-documentation/auxiliary/#rodrigues_rot","text":"rodrigues_rot ( P , n0 , n1 ) Rotate a set of point between two normal vectors using Rodrigues' formula. Arguments : P : Set of points np.array (N,3) . n0 : Orign vector np.array (1,3) . n1 : Destiny vector np.array (1,3) . Returns : Set of points P, but rotated np.array (N, 3)","title":"rodrigues_rot"},{"location":"api-documentation/circle/","text":"Circle \u00b6 class Circle (): | Circle () Implementation for Circle RANSAC. This class finds the circle's parameters based on 3 sampled points. This method uses 3 points to find the circle's plane, center and radius. fit \u00b6 | fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the parameters (axis and radius and center) to define a circle. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the cylinder hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the circle np.array(1,3) which the circle center is passing through. axis : Vector describing circle's plane normal as np.array(1,3). radius : Radius of the circle. inliers : Inlier's index from the original point cloud.","title":"Circle"},{"location":"api-documentation/circle/#circle","text":"class Circle (): | Circle () Implementation for Circle RANSAC. This class finds the circle's parameters based on 3 sampled points. This method uses 3 points to find the circle's plane, center and radius.","title":"Circle"},{"location":"api-documentation/circle/#fit","text":"| fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the parameters (axis and radius and center) to define a circle. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the cylinder hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the circle np.array(1,3) which the circle center is passing through. axis : Vector describing circle's plane normal as np.array(1,3). radius : Radius of the circle. inliers : Inlier's index from the original point cloud.","title":"fit"},{"location":"api-documentation/cuboid/","text":"Cuboid \u00b6 class Cuboid (): | Cuboid () Implementation for box (Cuboid) RANSAC. A cuboid is defined as convex polyhedron bounded by six faces formed by three orthogonal normal vectors. Cats love to play with this kind of geometry. This method uses 6 points to find 3 best plane equations orthogonal to eachother. We could use a recursive planar RANSAC, but it would use 9 points instead. Orthogonality makes this algorithm more efficient. fit \u00b6 | fit ( pts , thresh = 0.05 , maxIteration = 5000 ) Find the best equation for 3 planes which define a complete cuboid. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the cylinder radius which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : best_eq : Array of 3 best planes's equation np.array (3, 4) best_inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"Cuboid"},{"location":"api-documentation/cuboid/#cuboid","text":"class Cuboid (): | Cuboid () Implementation for box (Cuboid) RANSAC. A cuboid is defined as convex polyhedron bounded by six faces formed by three orthogonal normal vectors. Cats love to play with this kind of geometry. This method uses 6 points to find 3 best plane equations orthogonal to eachother. We could use a recursive planar RANSAC, but it would use 9 points instead. Orthogonality makes this algorithm more efficient.","title":"Cuboid"},{"location":"api-documentation/cuboid/#fit","text":"| fit ( pts , thresh = 0.05 , maxIteration = 5000 ) Find the best equation for 3 planes which define a complete cuboid. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the cylinder radius which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : best_eq : Array of 3 best planes's equation np.array (3, 4) best_inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"fit"},{"location":"api-documentation/cylinder/","text":"Cylinder \u00b6 class Cylinder (): | Cylinder () Warning The cylinder RANSAC does NOT present good results on real data on the current version. We are working to make a better algorithim using normals. If you want to contribute, please create a MR on github. Or give us ideas on this issue Implementation for cylinder RANSAC. This class finds a infinite height cilinder and returns the cylinder axis, center and radius. fit \u00b6 | fit ( pts , thresh = 0.2 , maxIteration = 10000 ) Find the parameters (axis and radius) defining a cylinder. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the cylinder hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the cylinder np.array(1,3) which the cylinder axis is passing through. axis : Vector describing cylinder's axis np.array(1,3). radius : Radius of cylinder. inliers : Inlier's index from the original point cloud.","title":"Cylinder"},{"location":"api-documentation/cylinder/#cylinder","text":"class Cylinder (): | Cylinder () Warning The cylinder RANSAC does NOT present good results on real data on the current version. We are working to make a better algorithim using normals. If you want to contribute, please create a MR on github. Or give us ideas on this issue Implementation for cylinder RANSAC. This class finds a infinite height cilinder and returns the cylinder axis, center and radius.","title":"Cylinder"},{"location":"api-documentation/cylinder/#fit","text":"| fit ( pts , thresh = 0.2 , maxIteration = 10000 ) Find the parameters (axis and radius) defining a cylinder. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the cylinder hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the cylinder np.array(1,3) which the cylinder axis is passing through. axis : Vector describing cylinder's axis np.array(1,3). radius : Radius of cylinder. inliers : Inlier's index from the original point cloud.","title":"fit"},{"location":"api-documentation/line/","text":"Line \u00b6 class Line (): | Line () Implementation for 3D Line RANSAC. This object finds the equation of a line in 3D space using RANSAC method. This method uses 2 points from 3D space and computes a line. The selected candidate will be the line with more inliers inside the radius theshold. fit \u00b6 | fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the best equation for the 3D line. The line in a 3d enviroment is defined as y = Ax+B, but A and B are vectors intead of scalars. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the line which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : A : 3D slope of the line (angle) np.array (1, 3) B : Axis interception as np.array (1, 3) inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"Line"},{"location":"api-documentation/line/#line","text":"class Line (): | Line () Implementation for 3D Line RANSAC. This object finds the equation of a line in 3D space using RANSAC method. This method uses 2 points from 3D space and computes a line. The selected candidate will be the line with more inliers inside the radius theshold.","title":"Line"},{"location":"api-documentation/line/#fit","text":"| fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the best equation for the 3D line. The line in a 3d enviroment is defined as y = Ax+B, but A and B are vectors intead of scalars. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the line which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : A : 3D slope of the line (angle) np.array (1, 3) B : Axis interception as np.array (1, 3) inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"fit"},{"location":"api-documentation/plane/","text":"Plane \u00b6 class Plane (): | Plane () Implementation of planar RANSAC. Class for Plane object, which finds the equation of a infinite plane using RANSAC algorithim. Call fit(.) to randomly take 3 points of pointcloud to verify inliers based on a threshold. fit \u00b6 | fit ( pts , thresh = 0.05 , minPoints = 100 , maxIteration = 1000 ) Find the best equation for a plane. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the plane which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : self.equation : Parameters of the plane using Ax+By+Cy+D np.array (1, 4) self.inliers : points from the dataset considered inliers","title":"Plane"},{"location":"api-documentation/plane/#plane","text":"class Plane (): | Plane () Implementation of planar RANSAC. Class for Plane object, which finds the equation of a infinite plane using RANSAC algorithim. Call fit(.) to randomly take 3 points of pointcloud to verify inliers based on a threshold.","title":"Plane"},{"location":"api-documentation/plane/#fit","text":"| fit ( pts , thresh = 0.05 , minPoints = 100 , maxIteration = 1000 ) Find the best equation for a plane. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold distance from the plane which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : self.equation : Parameters of the plane using Ax+By+Cy+D np.array (1, 4) self.inliers : points from the dataset considered inliers","title":"fit"},{"location":"api-documentation/point/","text":"Point \u00b6 class Point (): | Point () Implementation for Point RANSAC. This object finds the coordinate of a point in 3D space using RANSAC method. The point with more neighbors in a determined radius ( thresh ) will be selected as the best candidate. fit \u00b6 | fit ( pts , thresh = 0.2 , maxIteration = 10000 ) Find the best point for the 3D Point representaiton. The Point in a 3d enviroment is defined as a X, Y Z coordinate with more neighbors around. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold radius from the point which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Point selected as best candidate np.array (1, 3) inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"Point"},{"location":"api-documentation/point/#point","text":"class Point (): | Point () Implementation for Point RANSAC. This object finds the coordinate of a point in 3D space using RANSAC method. The point with more neighbors in a determined radius ( thresh ) will be selected as the best candidate.","title":"Point"},{"location":"api-documentation/point/#fit","text":"| fit ( pts , thresh = 0.2 , maxIteration = 10000 ) Find the best point for the 3D Point representaiton. The Point in a 3d enviroment is defined as a X, Y Z coordinate with more neighbors around. Arguments : pts : 3D point cloud as a np.array (N,3) . thresh : Threshold radius from the point which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Point selected as best candidate np.array (1, 3) inliers : Inlier's index from the original point cloud. np.array (1, M)","title":"fit"},{"location":"api-documentation/sphere/","text":"Sphere \u00b6 class Sphere (): | Sphere () Implementation for Sphere RANSAC. A Sphere is defined as points spaced from the center by a constant radius. This class finds the center and radius of a sphere. Base on article \"PGP2X: Principal Geometric Primitives Parameters Extraction\" fit \u00b6 | fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the parameters (center and radius) to define a Sphere. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the Sphere hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the cylinder np.array(1,3) which the cylinder axis is passing through. radius : Radius of cylinder. inliers : Inlier's index from the original point cloud.","title":"Sphere"},{"location":"api-documentation/sphere/#sphere","text":"class Sphere (): | Sphere () Implementation for Sphere RANSAC. A Sphere is defined as points spaced from the center by a constant radius. This class finds the center and radius of a sphere. Base on article \"PGP2X: Principal Geometric Primitives Parameters Extraction\"","title":"Sphere"},{"location":"api-documentation/sphere/#fit","text":"| fit ( pts , thresh = 0.2 , maxIteration = 1000 ) Find the parameters (center and radius) to define a Sphere. Arguments : pts : 3D point cloud as a numpy array (N,3). thresh : Threshold distance from the Sphere hull which is considered inlier. maxIteration : Number of maximum iteration which RANSAC will loop over. Returns : center : Center of the cylinder np.array(1,3) which the cylinder axis is passing through. radius : Radius of cylinder. inliers : Inlier's index from the original point cloud.","title":"fit"}]}